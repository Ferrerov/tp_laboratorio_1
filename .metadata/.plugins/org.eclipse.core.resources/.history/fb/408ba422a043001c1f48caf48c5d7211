#include "Controller.h"


/** \brief Carga los datos de los empleados desde el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_loadFromText(char* path , LinkedList* pArrayListEmployee)
{
	FILE *pFile;
	pFile = fopen(path, "r");

	if(pFile != NULL)
	{
		parser_EmployeeFromText(pFile , pArrayListEmployee);
	}

	fclose(pFile);
    return 1;
}

/** \brief Carga los datos de los empleados desde el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_loadFromBinary(char* path , LinkedList* pArrayListEmployee)
{
	FILE *pFile;
	pFile = fopen(path, "rb");

	if(pFile != NULL)
	{
		parser_EmployeeFromBinary(pFile , pArrayListEmployee);
	}

	fclose(pFile);
    return 1;
}

/** \brief Alta de empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_addEmployee(LinkedList* pArrayListEmployee)
{
	int retorno = -1;
	Employee *pNuevoEmpleado;
	FILE *ultimoIdTxt;
	int idAux;
	//int numero;
	int id;
	char nombre[128];
	int horasTrabajadas;
	int sueldo;

	if(pArrayListEmployee != NULL)
	{
		pNuevoEmpleado = employee_new();
		if(pNuevoEmpleado != NULL)
		{
			if(GetString("Ingrese el nombre del empleado: ", nombre) == 0 &&
			   GetInt(&horasTrabajadas, "Ingrese la cantidad de horas trabajadas (min. 1 / max 500).", "Error, por favor ingrese una cantidad válida (min. 1 / max 500).", 1, 500, 5) == 0 &&
			   GetInt(&sueldo, "Ingrese el sueldo del empleado (min. 100 / max 300000).", "Error, por favor ingrese un sueldo válido (min. 100 / max 300000).", 100, 300000, 5) == 0)
			{
				id = controller_getLastIdTxt("ultimoId.txt");
				/*ultimoIdTxt = fopen("ultimoId.txt", "r");
				fscanf(ultimoIdTxt, "%d", &idAux);
				printf("%d", idAux);
				fclose(ultimoIdTxt);
				id = idAux + 1;
				ultimoIdTxt = fopen("ultimoId.txt", "w");
				fprintf(ultimoIdTxt, "%d", id);
				fclose(ultimoIdTxt);*/

				employee_setId(pNuevoEmpleado, id);
				employee_setNombre(pNuevoEmpleado, nombre);
				employee_setHorasTrabajadas(pNuevoEmpleado, horasTrabajadas);
				employee_setSueldo(pNuevoEmpleado, sueldo);

				ll_add(pArrayListEmployee, pNuevoEmpleado);
				printf("\nSe ha cargado el siguiente empleado:");
				printf("\n|----------------------------------------------------------------|");
				printf("\n|%*s|%*s|%*s|%*s|", -12, "ID EMPLEADO", -20, "NOMBRE",-18, "HORAS TRABAJADAS",-11 , "SUELDO");
				printf("\n|----------------------------------------------------------------|");
				employee_print(pNuevoEmpleado);
				printf("\n|----------------------------------------------------------------|");
			}
		}
	}



    return retorno;
}

/** \brief Modificar datos de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_editEmployee(LinkedList* pArrayListEmployee)
{
	int retorno = -1;
	Employee *pModificarEmpleado;
	int ultimoId;

	if(pArrayListEmployee != NULL)
	{
		fopen
		controller_listEmployee(pArrayListEmployee);
	}

    return retorno;
}

/** \brief Baja de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_removeEmployee(LinkedList* pArrayListEmployee)
{
	int retorno = -1;



    return retorno;
}

/** \brief Listar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_ListEmployee(LinkedList* pArrayListEmployee)
{
	int retorno = -1;
	Employee * auxEmpleado;
	int len;

	if(pArrayListEmployee != NULL)
	{
		len = ll_len(pArrayListEmployee);

		printf("\n|----------------------------------------------------------------|");
		printf("\n|%*s|%*s|%*s|%*s|", -12, "ID EMPLEADO", -20, "NOMBRE",-18, "HORAS TRABAJADAS",-11 , "SUELDO");
		printf("\n|----------------------------------------------------------------|");
		for(int i=0; i < len; i++)
		{
			auxEmpleado = ll_get(pArrayListEmployee, i);
			employee_print(auxEmpleado);
			retorno = 0;
		}
		printf("\n|----------------------------------------------------------------|");
	}

    return retorno;
}

/** \brief Ordenar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_sortEmployee(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsText(char* path , LinkedList* pArrayListEmployee)
{
	int retorno = -1;
	FILE *pFile;

	pFile = fopen(path, "w");

	if(pFile != NULL && pArrayListEmployee != NULL)
	{
		parser_EmployeeToText(pFile, pArrayListEmployee);
		retorno = 0;
	}
	fclose(pFile);

	return retorno;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsBinary(char* path , LinkedList* pArrayListEmployee)
{
	int retorno = -1;
	FILE *pFile;

	pFile = fopen(path, "wb");

	if(pFile != NULL && pArrayListEmployee != NULL)
	{
		parser_EmployeeToBinary(pFile, pArrayListEmployee);
		retorno = 0;
	}
	fclose(pFile);

    return retorno;
}

int controller_getLastId(char* path, LinkedList* pArrayListEmployee)
{
	int retorno = -1;
	FILE *ultimoIdTxt;
	FILE *txtId;
	int mayorId = 0;

	ultimoIdTxt = fopen("ultimoId.txt", "r");
	if(ultimoIdTxt == NULL)
	{
		txtId = fopen(path, "r");
		mayorId = parser_EmployeeFromTextForId(txtId , pArrayListEmployee);
		fclose(txtId);
		ultimoIdTxt = fopen("ultimoId.txt", "w");
		if(ultimoIdTxt != NULL)
		{
			fprintf(ultimoIdTxt, "%d", mayorId);

		}
		fclose(ultimoIdTxt);
	}

	return retorno;
}

int controller_getLastIdTxt(char* path)
{
	int retorno = -1;
	FILE *pFIle;
	int id;
	int idAux;

	pFIle = fopen(path, "r");
	fscanf(pFIle, "%d", &idAux);
	printf("%d", idAux);
	fclose(pFIle);
	id = idAux + 1;

	pFIle = fopen(path, "w");
	fprintf(pFIle, "%d", id);
	fclose(pFIle);

	retorno = id;

	return retorno;
}

